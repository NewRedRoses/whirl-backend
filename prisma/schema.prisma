// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(50)
  dateJoined  DateTime      @default(now())
  username    String?       @db.VarChar(50)
  password    String? // could be deleted
  googleId    String?       @unique
  profile     Profile?
  post        Post[]
  postsLiked  PostLike[]
  PostComment PostComment[]
  friends     User[]        @relation("UserFriends") // TB deprecated
  friendOf    User[]        @relation("UserFriends") //TB deprecated
  friendsA    UserFriend[]  @relation("FriendshipA")
  friendsB    UserFriend[]  @relation("FriendshipB")
  role        String        @default("user")
}

model Profile {
  id           Int     @id @default(autoincrement())
  displayName  String? @db.VarChar(50)
  userId       Int     @unique
  user         User    @relation(fields: [userId], references: [id])
  pfpUrl       String?
  friendsCount Int     @default(0)
  bio          String? @db.VarChar(200)
}

model Post {
  id          Int           @id @default(autoincrement())
  userId      Int
  content     String        @default("")
  user        User          @relation(fields: [userId], references: [id])
  datePosted  DateTime      @default(now())
  likesNum    Int           @default(0) // I'm trying to avoid complexity...
  postComment PostComment[]
  postLike    PostLike[]
}

model PostLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  dateLiked DateTime @default(now())
}

model PostComment {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  content    String   @default("")
  postId     Int
  post       Post     @relation(fields: [postId], references: [id])
  datePosted DateTime @default(now())
}

model UserFriend {
  id            Int      @id @default(autoincrement())
  userIdA       Int
  userA         User     @relation("FriendshipA", fields: [userIdA], references: [id])
  userIdB       Int
  userB         User     @relation("FriendshipB", fields: [userIdB], references: [id])
  requestStatus String   @default("pending")
  date          DateTime @default(now())

  @@unique([userIdA, userIdB])
}
